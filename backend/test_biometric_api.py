#!/usr/bin/env python3
"""
Script de test pour l'API de pointage biom√©trique
Ce script permet de tester les diff√©rents endpoints de l'API
"""

import requests
import json
from datetime import datetime, timedelta
import time

# Configuration de l'API
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api"

def get_auth_token(username, password):
    """Obtenir un token d'authentification"""
    url = f"{API_BASE}/token/"
    data = {
        "username": username,
        "password": password
    }
    
    try:
        response = requests.post(url, json=data)
        if response.status_code == 200:
            return response.json()["access"]
        else:
            print(f"Erreur d'authentification: {response.status_code}")
            print(response.text)
            return None
    except Exception as e:
        print(f"Erreur de connexion: {e}")
        return None

def test_biometric_punch(token, biometric_id="12345", log_type="ENTREE"):
    """Tester la r√©ception d'un pointage biom√©trique"""
    url = f"{API_BASE}/biometric/receive-punch/"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Donn√©es de test
    data = {
        "biometric_id": biometric_id,
        "log_type": log_type,
        "timestamp": datetime.now().isoformat(),
        "device_id": "DEVICE_001",
        "raw_data": {
            "fingerprint_quality": "high",
            "temperature": "36.5",
            "location": "entrance"
        }
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"\n=== Test pointage biom√©trique ===")
        print(f"URL: {url}")
        print(f"Donn√©es: {json.dumps(data, indent=2)}")
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 201:
            result = response.json()
            print(f"‚úÖ Pointage enregistr√© avec succ√®s!")
            print(f"   - Log ID: {result.get('log_id')}")
            print(f"   - Employ√©: {result.get('employee')}")
        else:
            print(f"‚ùå Erreur lors du pointage")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_manual_punch(token, employee_id=1, punch_type="in"):
    """Tester le pointage manuel"""
    url = f"{API_BASE}/presences/manual-punch/"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    data = {
        "employee_id": employee_id,
        "punch_type": punch_type,
        "punch_time": datetime.now().strftime("%H:%M")
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"\n=== Test pointage manuel ===")
        print(f"URL: {url}")
        print(f"Donn√©es: {json.dumps(data, indent=2)}")
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 200:
            print(f"‚úÖ Pointage manuel r√©ussi!")
        else:
            print(f"‚ùå Erreur lors du pointage manuel")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_create_absences(token, date=None):
    """Tester la cr√©ation automatique d'absences"""
    url = f"{API_BASE}/biometric/create-absences/"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    if not date:
        date = (datetime.now() - timedelta(days=1)).strftime("%Y-%m-%d")
    
    data = {
        "date": date
    }
    
    try:
        response = requests.post(url, json=data, headers=headers)
        print(f"\n=== Test cr√©ation d'absences ===")
        print(f"URL: {url}")
        print(f"Donn√©es: {json.dumps(data, indent=2)}")
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Absences cr√©√©es avec succ√®s!")
            print(f"   - Nombre d'absences: {result.get('absences_created')}")
            print(f"   - Message: {result.get('message')}")
        else:
            print(f"‚ùå Erreur lors de la cr√©ation d'absences")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_get_presences(token):
    """Tester la r√©cup√©ration des pr√©sences"""
    url = f"{API_BASE}/presences/"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        print(f"\n=== Test r√©cup√©ration pr√©sences ===")
        print(f"URL: {url}")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Pr√©sences r√©cup√©r√©es!")
            print(f"   - Nombre de pr√©sences: {len(data.get('results', []))}")
            print(f"   - Total: {data.get('count', 0)}")
        else:
            print(f"‚ùå Erreur lors de la r√©cup√©ration")
            print(f"R√©ponse: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def test_get_statistics(token):
    """Tester la r√©cup√©ration des statistiques"""
    url = f"{API_BASE}/presences/statistics/"
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(url, headers=headers)
        print(f"\n=== Test statistiques ===")
        print(f"URL: {url}")
        print(f"Status: {response.status_code}")
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Statistiques r√©cup√©r√©es!")
            print(f"   - P√©riode: {data.get('period', {})}")
            print(f"   - Statistiques: {json.dumps(data.get('statistics', {}), indent=2)}")
        else:
            print(f"‚ùå Erreur lors de la r√©cup√©ration")
            print(f"R√©ponse: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")

def main():
    """Fonction principale de test"""
    print("üß™ Tests de l'API de pointage biom√©trique")
    print("=" * 50)
    
    # Informations de connexion (√† adapter selon vos donn√©es)
    username = "admin"  # Remplacer par un utilisateur existant
    password = "admin123"  # Remplacer par le mot de passe correct
    
    # Obtenir le token d'authentification
    print(f"üîê Authentification avec {username}...")
    token = get_auth_token(username, password)
    
    if not token:
        print("‚ùå Impossible d'obtenir le token d'authentification")
        print("V√©rifiez les identifiants et que le serveur est d√©marr√©")
        return
    
    print(f"‚úÖ Token obtenu: {token[:20]}...")
    
    # Tests de l'API
    print("\n" + "=" * 50)
    
    # Test 1: Pointage biom√©trique (entr√©e)
    test_biometric_punch(token, "12345", "ENTREE")
    time.sleep(1)
    
    # Test 2: Pointage biom√©trique (sortie)
    test_biometric_punch(token, "12345", "SORTIE")
    time.sleep(1)
    
    # Test 3: Pointage manuel
    test_manual_punch(token, 1, "in")
    time.sleep(1)
    
    # Test 4: R√©cup√©ration des pr√©sences
    test_get_presences(token)
    time.sleep(1)
    
    # Test 5: Statistiques
    test_get_statistics(token)
    time.sleep(1)
    
    # Test 6: Cr√©ation d'absences (pour hier)
    test_create_absences(token)
    
    print("\n" + "=" * 50)
    print("‚úÖ Tests termin√©s!")
    
    # Instructions d'utilisation
    print("\nüìã Instructions d'utilisation:")
    print("1. Assurez-vous que le serveur Django est d√©marr√© (python manage.py runserver)")
    print("2. Cr√©ez des utilisateurs avec des biometric_id dans l'admin Django")
    print("3. Testez avec diff√©rents biometric_id et types de pointage")
    print("4. V√©rifiez les r√©sultats dans l'admin Django")
    
    print("\nüîó Endpoints disponibles:")
    print(f"   - Pointage biom√©trique: POST {API_BASE}/biometric/receive-punch/")
    print(f"   - Pointage manuel: POST {API_BASE}/presences/manual-punch/")
    print(f"   - Cr√©ation absences: POST {API_BASE}/biometric/create-absences/")
    print(f"   - Liste pr√©sences: GET {API_BASE}/presences/")
    print(f"   - Statistiques: GET {API_BASE}/presences/statistics/")

if __name__ == "__main__":
    main() 